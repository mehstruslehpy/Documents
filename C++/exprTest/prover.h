#ifndef _PROVER_H
#define _PROVER_H
#include "defs.h"
#include <vector>

//A proof is an array of well formed propositions (premises) generated by inference rules from an initial list of propositions
//and also some data for book keeping
class Prover
{
    int _premcount;				//the count of premises
    int _highestasm;			//the highest level of assumption in the proof currently
    vector<BoolExp*> _premi;	//the premises themselves
    vector<string> 	_reasons;	//the inference rule used for each derivation, this array is parallel to the premises

    vector<PropType> _ptypes;	//parallel array for keeping track of typeinfo

    //in addition to program logic these are used for printing in the correct format
    vector<int> _assum; 		//the line number and level of nesting for each assumption, -1 is used for blocked/contradicted formulas
    vector<int> _blocked; 		//the line number and amount of blocks for each contradicted proposition
    vector<int> _starred;		//starred derivations have no further inferences that can be made but are not necessarily contradicted

    //These versions match a well formed formula anywhere in the proof including contradicted ones
    int MatchString(string);	//returns true if the string input is present in the proof (any wff)
    int MatchNegation(string);	//returns true if the negation of the input string is present in the proof (the negation of the input)

    //The unblocked versions of the above methods only match usable propositions
    int MatchStringUB(string);	//returns true if the string input is present in the proof
    int MatchNegationUB(string);	//returns true if the negation of the input string is present in the proof

public:
    Prover();
    ~Prover();

    //setup functions
    void AddPremise(BoolExp*, PropType, string);

    //main functions for proving
    void Infer(const int);	//make an inference on the wff at an index if possible
    bool MakeAssumption();	//make an assumption if possible
    bool FindContradiction(); //check the proof for a contradiction if one is found block off all formulas at matching assumption levels

    //auxiliary functions
    void PrintPremises() const;	//pretty print all premises
    string PremiseName(int i) const;	//return a single premise as a string
    bool Evaluate(int i, Context&) const;	//return the boolean value of a single premise
    int PremiseCount() const;	//returns the count of premises
    int starredCount() const;	//returns how many formulas are starred
    int HighestAssumption() const;	//returns the current highest assumption level
};
#endif
