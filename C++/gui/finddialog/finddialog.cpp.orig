#include <QtGui>
#include "finddialog.h"

//constructors for finddialog basically this just builds the window and child widgets
FindDialog::FindDialog(QWidget *parent)
	:QDialog(parent)
{
	//tr() marks string literals for translation to other languages
	//ampersands: & denotes hotkey buttons
	label = new QLabel(tr("Find &what:"));
	lineEdit = new QLineEdit;
	label->setBuddy(lineEdit);
	
	caseCheckBox = new QCheckBox(tr("match &case"));
	backwardCheckBox = new QCheckBox(tr("search &backward"));

	findButton = new QPushButton(tr("&Find"));
	findButton->setDefault(true);
	findButton->setEnabled(false);
	
	closeButton = new QPushButton(tr("close"));

	connect(lineEdit, SIGNAL(textChanged(const QString &)),
			this, SLOT(enableFindButton(const QString &)));
	connect(findButton, SIGNAL(clicked()),
			this,  SLOT(findClicked()));
	connect(closeButton, SIGNAL(clicked()),
			this SLOT(close()));
	
	QHBoxLayout *topLeftLayout = new QHBoxLayout;
	topLeftLayout->addWidget(label);
	topLeftLayout->addWidget(lineEdit);

	QVBoxLayout *leftLayout = new QVBoxLayout;
	leftLayout->addWidget(topLeftLayout);
	leftLayout->addWidget(caseCheckBox);
	leftLayout->addWidget(backwardCheckBox);

	QVBoxLayout *rightLayout = new QVBoxLayout;
	rightLayout->addWidget(findButton);
	rightLayout->addWidget(closeButton);
	rightLayout->addStretch();

	QHBoxLayout  *mainLayout = new QHBoxLayout;
	mainLayout->addLayout(leftLayout);
	mainLayout->addLayout(rightLayout);
	setLayout(mainLayout);	
	
	setWindowTitle(tr("Find"));
	setFixedHeight(sizeHint().height());
}

//according to the book no destructor is necessary because child objects
//will be auto-deleted when the parent is destroyed

//here is the handler code for when the find button is clicked I might repurpose this for
//another thing later
void FindDialog::findClicked()
{
	//read in the text to search for
	Qstring text = lineEdit->text();
	//set case sensitive or not
	Qt::CaseSensitivity cs = caseCheckBox->isChecked() ? Qt::CaseSensitive
													   : Qt::CaseInsensitive;
	if (backwardCheckBox->isChecked())
	{
		emit findPrevious(text, cs);
	}
	else
	{
		emit findNext(text, cs);
	}
}

void FindDialog::enableFindButton(const QString &text)
{
	findButton->setEnabled(!text.isEmpty());
}
