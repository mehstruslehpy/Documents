#include <stdint.h>
#include <stdio.h>
#include <assert.h>

/*CONSTANTS*/
//pi/4 ~ 000.1100100100001 ~ 6433
const uint16_t PIOVER4 = 6433;
//pi/2 ~ 001.1 0010 0100 0011 ~ 12867
const uint16_t PIOVER2 = 12867;
//3pi/4 ~ 010.0 1011 0110 0101 ~ 19301
const uint16_t THREEPIOVER4 = 19301;
//pi ~ 011.0010010000111 ~ 25735
const uint16_t PI = 25735;
//NOTE: FIX ME
//5pi/4 ~ 111.1101101010011 ~ 64339
const uint16_t FIVEPIOVER4 = 64339;
//3pi/2 ~ 100.1011011001011 ~ 38603
const uint16_t THREEPIOVER2 = 38603;
//7pi/4 ~ 45037
const uint16_t SEVENPIOVER4 = 45037;
//twopi ~ 110.0100100001111 ~ 102943
const uint16_t TWOPI = 102943;
// 000.1011010100000  ~ sqrt(2)/2 ~ 5792
const uint16_t SQRT2OVER2 = 5792;

uint16_t linear_approx_cos(uint16_t);
int32_t binmul(int32_t,int32_t);
void debug_binprint16(uint16_t);

int main()
{
	uint16_t argument = FIVEPIOVER4;
	int32_t ret = 0;
	ret = linear_approx_cos(argument);
	printf("OUTPUT: %02X\n",ret);
	return 0;
}

uint16_t linear_approx_cos(uint16_t param)
{
	//if out of range fail
	printf("DEBUG-OUTPUT: %02X\n",param);
	//assert(param < TWOPI);
	
	assert(param < 102943);

	if (param < PIOVER4)
	{
		param = SQRT2OVER2 - binmul(SQRT2OVER2,(param - PIOVER4));
	}
	else if (param >= PIOVER4 && param < PIOVER2)
	{
		param = PIOVER2 - param;
	}
	else if (param >= PIOVER2 && param < THREEPIOVER4)
	{
		param = - SQRT2OVER2 - binmul(SQRT2OVER2,(param - THREEPIOVER4));
	}
	else if (param >= THREEPIOVER4 && param < PI)
	{
		param = -1;
	}
	else if (param >= PI && param < FIVEPIOVER4)
	{
		param = - SQRT2OVER2 + binmul(SQRT2OVER2,(param - THREEPIOVER4));
	}
	else if (param >= FIVEPIOVER4 && param < THREEPIOVER2)
	{
		param = param - THREEPIOVER2;
	}
	else if (param >= THREEPIOVER2 && param < SEVENPIOVER4)
	{
		param = SQRT2OVER2 + binmul(SQRT2OVER2,(param - SEVENPIOVER4));
	}
	else if (param >= SEVENPIOVER4 && param < TWOPI)
	{
		param = 1; 
	}

	return param;
}

int32_t binmul(int32_t a, int32_t b)
{
    int32_t ret = 0;

    for(int i = 0; i <= 31; i++)
    {
        if((b >> i) & 0x01)
        {
            ret += (a<<i);
        }

    }
    ret = (ret<<26);
	return ret;
}

void debug_binprint16(uint16_t);
{
for (int i = 0; i < bitwidth; i++)
{
    //if the i'th bit is set
	    if((myint >> i) & 0x01)
		    {
			        printf("1");
					    }
						    else
							    {
								        printf("0");
										    }
											    printf("\n");
												}

}
/*
*TODO: Increase the accuracy
*	add in linear approximations at:
*	-:  sqrt(2)/2 - sqrt(2)/2 * (x - pi/4)
*	-: -sqrt(2)/2 - sqrt(2)/2 * (x - 3pi/4)
*	-: -sqrt(2)/2 + sqrt(2)/2 * (x - 5pi/4)
*	-:  sqrt(2)/2 + sqrt(2)/2 * (x - 7pi/4)
*	
*	figure out multiplying by an irrational in ttpasm	
*
*	NOTE: 000.1011010100000  ~ sqrt(2)/2 ~ 5792
*/
/*
*	Description: Computes x*y without using the * operator
*				 This is mainly for figuring out binary multiplication
*/

